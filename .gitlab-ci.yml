stages:
  - test
  - build
  - deploy

default:
  before_script:
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY

flake8:
  stage: test
  image:
    name: ${DOCKER_REGISTRY}/flake8:4.0.1
    entrypoint: [""]
  before_script: []
  script:
    - flake8 --ignore=E501,E115 .
  tags:
    - arbat-build

build:
  stage: build
  only:
    - main
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME || true
    - docker build 
      --progress=plain
      --build-arg REGISTRY=${DOCKER_REGISTRY}
      --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME 
      -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA 
      -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
      -t uniminer:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  tags:
    - arbat-build

.deploy:
  stage: deploy
  variables:
    VAULT_ADDR: 'https://vault.arbat.dev:8200'
  script:
    - export VAULT_TOKEN=$(vault write -field=token auth/jwt/login role=opendata jwt=$CI_JOB_JWT)
    - vault kv get -field=db_config -format=json opendata/uniminer > /DBConfig.json
    - vault kv get -field=kp_config -format=json opendata/uniminer > /KPConfig.json
    - vault kv get -field=proxy_user_of_kind3 -format=json opendata/uniminer > /ProxyUserOfKind3.json
    - docker stack deploy --with-registry-auth --prune -c docker-compose.yml $CI_PROJECT_NAME
    - stack_wait $CI_PROJECT_NAME

deploy_main:
  extends: .deploy
  only:
    - main
  tags:
    - arbat-deploy
