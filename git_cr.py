#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import curses
import re
import shlex
import subprocess
import sys

TYPES = ["feat", "fix", "chore"]  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏, –∫–∞–∫ –ø—Ä–æ—Å–∏–ª

def git_cr():
    parser = argparse.ArgumentParser(description="–£–¥–æ–±–Ω—ã–π CR: —Å—Ç—Ä–µ–ª–∫–∞–º–∏ –≤—ã–±–∏—Ä–∞–µ—à—å —Ç–∏–ø -> —Å–æ–æ–±—â–µ–Ω–∏–µ -> –≤–µ—Ç–∫–∞ -> –ø—É—à (+MR).")
    parser.add_argument("--remote", default="origin", help="–ò–º—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é origin).")
    parser.add_argument("--base", default="main", help="–û—Ç –∫–∞–∫–æ–π –≤–µ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–≤–ª—è—Ç—å—Å—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é main).")
    parser.add_argument("--yes", action="store_true", help="–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–≥–æ–≤.")
    parser.add_argument("--mr", action="store_true", help="–î–æ–±–∞–≤–∏—Ç—å -–æ merge_request.create (–¥–ª—è GitLab).")
    parser.add_argument("--name", default="ad-user", help="–õ–æ–∫–∞–ª—å–Ω—ã–π user.name (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ad-user).")
    parser.add_argument("--email", default="ad.dev@arbat.dev", help="–õ–æ–∫–∞–ª—å–Ω—ã–π user.email (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ad.dev@arbat.dev).")
    args = parser.parse_args()

    # --- helper: –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º (—Ä—É—Å. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏) ---
    def say_and_run(cmd, check=True, capture=False):
        print(f"\n$ {cmd}")
        try:
            res = subprocess.run(
                cmd, shell=True, check=check,
                stdout=(subprocess.PIPE if capture else None),
                stderr=(subprocess.STDOUT if capture else None),
                text=True
            )
            if capture and res.stdout:
                print(res.stdout.strip())
            return res.returncode, (res.stdout.strip() if res.stdout else "")
        except subprocess.CalledProcessError as e:
            out = getattr(e, "stdout", "") or ""
            if out:
                print(out.strip())
            return e.returncode, out.strip()

    # --- helper: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —à–∞–≥–∞ ---
    def confirm(prompt, default_yes=True):
        if args.yes:
            print(f"{prompt} [auto-yes]")
            return True
        suffix = "Y/n" if default_yes else "y/N"
        ans = input(f"{prompt} ({suffix}): ").strip().lower()
        if ans == "":
            return default_yes
        return ans in ("y", "yes", "–¥", "–¥–∞")

    # --- —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ curses ---
    def select_type_curses(options):
        def _inner(stdscr):
            curses.curs_set(0)  # —Å–∫—Ä—ã—Ç—å –∫—É—Ä—Å–æ—Ä
            idx = 0
            while True:
                stdscr.erase()
                stdscr.addstr(0, 0, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–æ–º–º–∏—Ç–∞ (‚Üë/‚Üì, Enter):")
                for i, opt in enumerate(options):
                    if i == idx:
                        stdscr.addstr(2 + i, 0, f"> {opt}", curses.A_REVERSE)
                    else:
                        stdscr.addstr(2 + i, 0, f"  {opt}")
                key = stdscr.getch()
                if key in (curses.KEY_UP, ord('k')):
                    idx = (idx - 1) % len(options)
                elif key in (curses.KEY_DOWN, ord('j')):
                    idx = (idx + 1) % len(options)
                elif key in (curses.KEY_ENTER, 10, 13):
                    return options[idx]
        return curses.wrapper(_inner)

    # --- fallback, –µ—Å–ª–∏ curses –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–Ω–µ—Ç TTY ---
    def select_type_fallback(options):
        while True:
            v = input(f"–¢–∏–ø –∫–æ–º–º–∏—Ç–∞ [{'/'.join(options)}]: ").strip().lower()
            if v in options:
                return v
            print("‚õî –í–≤–µ–¥–∏ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –∏–∑:", ", ".join(options))

    code, current = say_and_run("git rev-parse --abbrev-ref HEAD", check=False, capture=True)
    print(f"‚û°Ô∏è –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {current}")

    # 1) –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ (user.name/email)
    if confirm(f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ user.name = '{args.name}'?", True):
        say_and_run(f"git config --local user.name {shlex.quote(args.name)}", check=True)
    if confirm(f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ user.email = '{args.email}'?", True):
        say_and_run(f"git config --local user.email {shlex.quote(args.email)}", check=True)

    # 2) –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–º–º–∏—Ç–∞ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
    print()
    if sys.stdin.isatty() and sys.stdout.isatty():
        try:
            ctype = select_type_curses(TYPES)
        except Exception:
            # –µ—Å–ª–∏ curses –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, IDE) ‚Äî fallback
            ctype = select_type_fallback(TYPES)
    else:
        ctype = select_type_fallback(TYPES)
    print(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {ctype}")



    # 5) –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (subject)
    subject = ""
    while not subject:
        subject = input("C–æ–æ–±—â–µ–Ω–∏–µ: ").strip()

    # 6) —Ñ–æ—Ä–º–∏—Ä—É–µ–º conventional commit —Å–æ–æ–±—â–µ–Ω–∏–µ
    commit_msg = f"{ctype}:{subject}"
    print(f"\nüìù Commit message: {commit_msg}")

    # 7) —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –≤–µ—Ç–∫–∏: type/slug(subject)
    slug = subject.lower()
    slug = re.sub(r"[^\w\-]+", "-", slug)
    slug = re.sub(r"-{2,}", "-", slug).strip("-")
    if not slug:
        slug = "change"
    branch_name = f"{ctype}/{slug}"
    print(f"üß≠ Branch: {branch_name}")

    # 8) –¥–µ–ª–∞–µ–º –∫–æ–º–º–∏—Ç (–∏–ª–∏ –ø—É—Å—Ç–æ–π)
    code, status = say_and_run("git status --porcelain", check=False, capture=True)
    dirty = bool(status.strip())
    if dirty:
        if confirm("–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç?", True):
            say_and_run("git add -A", check=True)
            say_and_run(f'git commit -m {shlex.quote(commit_msg)}', check=True)
    else:
        if confirm("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç. –°–æ–∑–¥–∞—Ç—å –ü–£–°–¢–û–ô –∫–æ–º–º–∏—Ç?", True):
            say_and_run(f'git commit --allow-empty -m {shlex.quote(commit_msg)}', check=True)

    # 9) –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ç–∫—É –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
    if confirm(f"–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–µ—Ç–∫—É '{args.base}' (fetch + rebase)?", True):
        say_and_run(f"git fetch {shlex.quote(args.remote)}", check=False)
        say_and_run(f"git pull --rebase {shlex.quote(args.remote)} {shlex.quote(args.base)}", check=False)

    if confirm(f"–°–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É '{branch_name}'?", True):
        say_and_run(f"git checkout -b {shlex.quote(branch_name)}", check=True)

    # 10) –ø—É—à (+ MR –¥–ª—è GitLab)
    push_cmd = f"git push -u {shlex.quote(args.remote)} {shlex.quote(branch_name)}"
    code, remote_url = say_and_run(f"git remote get-url {shlex.quote(args.remote)}", check=False, capture=True)
    is_gitlab = ("gitlab" in (remote_url or "").lower())
    if args.mr and is_gitlab:
        push_cmd += " -o merge_request.create"

    if confirm(f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—É—à? ({push_cmd})", True):
        say_and_run(push_cmd, check=True)

    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ. –ö–æ–º–º–∏—Ç –ø–æ conventional commits —Å–æ–∑–¥–∞–Ω, –≤–µ—Ç–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∑–∞–ø—É—à–µ–Ω–∞.")
    if args.mr and is_gitlab:
        print("üìù –î–ª—è GitLab MR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

if __name__ == "__main__":
    git_cr()