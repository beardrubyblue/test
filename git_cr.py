#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import os
import shlex
import subprocess
import sys

def git_cr():
    parser = argparse.ArgumentParser(description="–ü–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞, –≤–µ—Ç–∫–∏ –∏ –ø—É—à–∞ (GitLab MR –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).")
    parser.add_argument("--remote", default="origin", help="–ò–º—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é origin).")
    parser.add_argument("--base", default="main", help="–û—Ç –∫–∞–∫–æ–π –≤–µ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–≤–ª—è—Ç—å—Å—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é main).")
    parser.add_argument("--yes", action="store_true", help="–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–≥–æ–≤.")
    parser.add_argument("--mr", action="store_true", help="–î–æ–±–∞–≤–∏—Ç—å -o merge_request.create (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è GitLab).")
    parser.add_argument("--name", default="ad-user", help="–õ–æ–∫–∞–ª—å–Ω—ã–π user.name (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ad-user).")
    parser.add_argument("--email", default="ad.dev@arbat.dev", help="–õ–æ–∫–∞–ª—å–Ω—ã–π user.email (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ad.dev@arbat.dev).")
    args = parser.parse_args()

    def say_and_run(cmd, check=True, capture=False):
        print(f"\n$ {cmd}")
        try:
            res = subprocess.run(
                cmd, shell=True, check=check,
                stdout=(subprocess.PIPE if capture else None),
                stderr=(subprocess.STDOUT if capture else None),
                text=True
            )
            if capture and res.stdout:
                print(res.stdout.strip())
            return res.returncode, (res.stdout.strip() if res.stdout else "")
        except subprocess.CalledProcessError as e:
            out = getattr(e, "stdout", "") or ""
            if out:
                print(out.strip())
            return e.returncode, out.strip()

    def confirm(prompt, default_yes=True):
        if args.yes:
            print(f"{prompt} [auto-yes]")
            return True
        suffix = "Y/n" if default_yes else "y/N"
        ans = input(f"{prompt} ({suffix}): ").strip().lower()
        if ans == "":
            return default_yes
        return ans in ("y", "yes", "–¥", "–¥–∞")

    # 0) –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    code, out = say_and_run("git rev-parse --is-inside-work-tree", check=False, capture=True)
    if code != 0 or out.strip() != "true":
        print("‚ùå –ó–¥–µ—Å—å –Ω–µ—Ç git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ó–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
        sys.exit(1)

    code, current = say_and_run("git rev-parse --abbrev-ref HEAD", check=False, capture=True)
    if code != 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É.")
        sys.exit(2)
    print(f"‚û°Ô∏è –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {current}")

    code, _ = say_and_run(f"git remote get-url {shlex.quote(args.remote)}", check=False, capture=True)
    if code != 0:
        print(f"‚ùå Remote '{args.remote}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–∏–º–µ—Ä:\n   git remote add {args.remote} <URL>")
        sys.exit(3)

    # 1) –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
    if confirm(f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ user.name = '{args.name}'?", True):
        say_and_run(f"git config --local user.name {shlex.quote(args.name)}", check=True)
    if confirm(f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ user.email = '{args.email}'?", True):
        say_and_run(f"git config --local user.email {shlex.quote(args.email)}", check=True)

    # 2) –ö–æ–º–º–∏—Ç —Å —Ç–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∏–ª–∏ –ø—É—Å—Ç–æ–π)
    commit_msg = input("–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'CR request: OAuth2 support'): ").strip()
    if not commit_msg:
        commit_msg = "CR request"

    # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á–µ–º –¥–µ—Ä–µ–≤–µ
    code, status = say_and_run("git status --porcelain", check=False, capture=True)
    dirty = bool(status.strip())

    if dirty:
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        if confirm("–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç?", True):
            say_and_run("git add -A", check=True)
            say_and_run(f'git commit -m {shlex.quote(commit_msg)}', check=True)
    else:
        print("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç.")
        if confirm("–°–æ–∑–¥–∞—Ç—å –ü–£–°–¢–û–ô –∫–æ–º–º–∏—Ç —Å —Ç–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º?", True):
            say_and_run(f'git commit --allow-empty -m {shlex.quote(commit_msg)}', check=True)

    # 3) –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
    # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞

    branch_name = input("–ò–º—è –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'feature/123-support-oauth-2.0'): ").strip()
    if not branch_name:
        print("‚ùå –ò–º—è –≤–µ—Ç–∫–∏ –ø—É—Å—Ç–æ–µ.")
        sys.exit(4)

    # —Å–æ–∑–¥–∞—ë–º –≤–µ—Ç–∫—É –æ—Ç —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π (–æ–±—ã—á–Ω–æ —ç—Ç–æ base –∏–ª–∏ —Ç–≤–æ—è —Ñ–∏—á–∞-—Ç–æ—á–∫–∞)
    if confirm(f"–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É '{branch_name}' –æ—Ç —Ç–µ–∫—É—â–µ–π '{current}'?", True):
        say_and_run(f"git checkout -b {shlex.quote(branch_name)}", check=True)

    # 4) –ü—É—à –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏ (–∏ MR –¥–ª—è GitLab)
    # –µ—Å–ª–∏ MR –≤–∫–ª—é—á—ë–Ω –∏ remote —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ gitlab ‚Äî –¥–æ–±–∞–≤–∏–º –æ–ø—Ü–∏—é
    push_cmd = f"git push -u {shlex.quote(args.remote)} {shlex.quote(branch_name)}"
    code, remote_url = say_and_run(f"git remote get-url {shlex.quote(args.remote)}", check=False, capture=True)
    is_gitlab = ("gitlab" in (remote_url or "").lower())

    if args.mr and is_gitlab:
        push_cmd += " -o merge_request.create"

    print(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø—É—à: {push_cmd}")
    if confirm("–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—É—à?", True):
        code, _ = say_and_run(push_cmd, check=True)
        if code != 0:
            print("‚ùå Push –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π.")
            sys.exit(code)

    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ. –ö–æ–Ω—Ñ–∏–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω, –≤–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—à–µ–Ω–∞.")
    if args.mr and is_gitlab:
        print("üìù –î–ª—è GitLab –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω Merge Request –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    elif args.mr and not is_gitlab:
        print("‚ÑπÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ: -o merge_request.create –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ GitLab. –ù–∞ GitHub MR –Ω–µ —Å–æ–∑–¥–∞—Å—Ç—Å—è.")

if __name__ == "__main__":
    git_cr()